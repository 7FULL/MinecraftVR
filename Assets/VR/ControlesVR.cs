//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/ControlesVR.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ControlesVR : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ControlesVR()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ControlesVR"",
    ""maps"": [
        {
            ""name"": ""VR"",
            ""id"": ""ad399552-5c84-4e62-ad44-5978e855475e"",
            ""actions"": [
                {
                    ""name"": ""Saltar"",
                    ""type"": ""Button"",
                    ""id"": ""109373cb-9c22-4ffa-9e0a-7b84f859dc17"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ataque"",
                    ""type"": ""Button"",
                    ""id"": ""f74973a7-a04b-46ba-aff4-11687d138693"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Usar"",
                    ""type"": ""Button"",
                    ""id"": ""eed3aab7-0777-4a4b-b8de-d256489663bc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""7cfb200f-eab5-4ae6-a465-f4d34a6341ad"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""HeadRotation"",
                    ""type"": ""Value"",
                    ""id"": ""c899960b-8dba-4036-a08e-df1b1102bee0"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SlotPlus"",
                    ""type"": ""Button"",
                    ""id"": ""db479365-6616-4d4e-b807-8821f6b8e535"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SlotMinus"",
                    ""type"": ""Button"",
                    ""id"": ""50739553-0a69-4e41-a2d6-2f7c3bee190e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AbrirInventario"",
                    ""type"": ""Button"",
                    ""id"": ""2cb43ed9-7c6e-4294-b91c-c9ed1438d31d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""389621ac-c9ec-49af-9641-caf26059c4da"",
                    ""path"": ""<OculusTouchController>/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Saltar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cada1936-345b-4307-bb63-597dbdc36272"",
                    ""path"": ""<OculusTouchController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ataque"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""03d539de-f4cd-4f9d-ab7d-33bb0d5cae3b"",
                    ""path"": ""<OculusTouchController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Usar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cdda4b14-46ef-43f0-8d28-d15204093fe8"",
                    ""path"": ""<XRController>{LeftHand}/Primary2DAxis"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3f203a3c-a8c5-4de1-86a8-69f63481da05"",
                    ""path"": ""<XRHMD>/centerEyeRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HeadRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ebff86f3-69f9-4416-93fe-ee70405a2a72"",
                    ""path"": ""<OculusTouchController>{RightHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SlotPlus"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee8f80d0-2376-4d16-81ac-5a6994f20fcb"",
                    ""path"": ""<OculusTouchController>{LeftHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SlotMinus"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8bf90e86-d6df-4a00-9254-44516bc48d71"",
                    ""path"": ""<OculusTouchController>{RightHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AbrirInventario"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // VR
        m_VR = asset.FindActionMap("VR", throwIfNotFound: true);
        m_VR_Saltar = m_VR.FindAction("Saltar", throwIfNotFound: true);
        m_VR_Ataque = m_VR.FindAction("Ataque", throwIfNotFound: true);
        m_VR_Usar = m_VR.FindAction("Usar", throwIfNotFound: true);
        m_VR_Move = m_VR.FindAction("Move", throwIfNotFound: true);
        m_VR_HeadRotation = m_VR.FindAction("HeadRotation", throwIfNotFound: true);
        m_VR_SlotPlus = m_VR.FindAction("SlotPlus", throwIfNotFound: true);
        m_VR_SlotMinus = m_VR.FindAction("SlotMinus", throwIfNotFound: true);
        m_VR_AbrirInventario = m_VR.FindAction("AbrirInventario", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // VR
    private readonly InputActionMap m_VR;
    private IVRActions m_VRActionsCallbackInterface;
    private readonly InputAction m_VR_Saltar;
    private readonly InputAction m_VR_Ataque;
    private readonly InputAction m_VR_Usar;
    private readonly InputAction m_VR_Move;
    private readonly InputAction m_VR_HeadRotation;
    private readonly InputAction m_VR_SlotPlus;
    private readonly InputAction m_VR_SlotMinus;
    private readonly InputAction m_VR_AbrirInventario;
    public struct VRActions
    {
        private @ControlesVR m_Wrapper;
        public VRActions(@ControlesVR wrapper) { m_Wrapper = wrapper; }
        public InputAction @Saltar => m_Wrapper.m_VR_Saltar;
        public InputAction @Ataque => m_Wrapper.m_VR_Ataque;
        public InputAction @Usar => m_Wrapper.m_VR_Usar;
        public InputAction @Move => m_Wrapper.m_VR_Move;
        public InputAction @HeadRotation => m_Wrapper.m_VR_HeadRotation;
        public InputAction @SlotPlus => m_Wrapper.m_VR_SlotPlus;
        public InputAction @SlotMinus => m_Wrapper.m_VR_SlotMinus;
        public InputAction @AbrirInventario => m_Wrapper.m_VR_AbrirInventario;
        public InputActionMap Get() { return m_Wrapper.m_VR; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VRActions set) { return set.Get(); }
        public void SetCallbacks(IVRActions instance)
        {
            if (m_Wrapper.m_VRActionsCallbackInterface != null)
            {
                @Saltar.started -= m_Wrapper.m_VRActionsCallbackInterface.OnSaltar;
                @Saltar.performed -= m_Wrapper.m_VRActionsCallbackInterface.OnSaltar;
                @Saltar.canceled -= m_Wrapper.m_VRActionsCallbackInterface.OnSaltar;
                @Ataque.started -= m_Wrapper.m_VRActionsCallbackInterface.OnAtaque;
                @Ataque.performed -= m_Wrapper.m_VRActionsCallbackInterface.OnAtaque;
                @Ataque.canceled -= m_Wrapper.m_VRActionsCallbackInterface.OnAtaque;
                @Usar.started -= m_Wrapper.m_VRActionsCallbackInterface.OnUsar;
                @Usar.performed -= m_Wrapper.m_VRActionsCallbackInterface.OnUsar;
                @Usar.canceled -= m_Wrapper.m_VRActionsCallbackInterface.OnUsar;
                @Move.started -= m_Wrapper.m_VRActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_VRActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_VRActionsCallbackInterface.OnMove;
                @HeadRotation.started -= m_Wrapper.m_VRActionsCallbackInterface.OnHeadRotation;
                @HeadRotation.performed -= m_Wrapper.m_VRActionsCallbackInterface.OnHeadRotation;
                @HeadRotation.canceled -= m_Wrapper.m_VRActionsCallbackInterface.OnHeadRotation;
                @SlotPlus.started -= m_Wrapper.m_VRActionsCallbackInterface.OnSlotPlus;
                @SlotPlus.performed -= m_Wrapper.m_VRActionsCallbackInterface.OnSlotPlus;
                @SlotPlus.canceled -= m_Wrapper.m_VRActionsCallbackInterface.OnSlotPlus;
                @SlotMinus.started -= m_Wrapper.m_VRActionsCallbackInterface.OnSlotMinus;
                @SlotMinus.performed -= m_Wrapper.m_VRActionsCallbackInterface.OnSlotMinus;
                @SlotMinus.canceled -= m_Wrapper.m_VRActionsCallbackInterface.OnSlotMinus;
                @AbrirInventario.started -= m_Wrapper.m_VRActionsCallbackInterface.OnAbrirInventario;
                @AbrirInventario.performed -= m_Wrapper.m_VRActionsCallbackInterface.OnAbrirInventario;
                @AbrirInventario.canceled -= m_Wrapper.m_VRActionsCallbackInterface.OnAbrirInventario;
            }
            m_Wrapper.m_VRActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Saltar.started += instance.OnSaltar;
                @Saltar.performed += instance.OnSaltar;
                @Saltar.canceled += instance.OnSaltar;
                @Ataque.started += instance.OnAtaque;
                @Ataque.performed += instance.OnAtaque;
                @Ataque.canceled += instance.OnAtaque;
                @Usar.started += instance.OnUsar;
                @Usar.performed += instance.OnUsar;
                @Usar.canceled += instance.OnUsar;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @HeadRotation.started += instance.OnHeadRotation;
                @HeadRotation.performed += instance.OnHeadRotation;
                @HeadRotation.canceled += instance.OnHeadRotation;
                @SlotPlus.started += instance.OnSlotPlus;
                @SlotPlus.performed += instance.OnSlotPlus;
                @SlotPlus.canceled += instance.OnSlotPlus;
                @SlotMinus.started += instance.OnSlotMinus;
                @SlotMinus.performed += instance.OnSlotMinus;
                @SlotMinus.canceled += instance.OnSlotMinus;
                @AbrirInventario.started += instance.OnAbrirInventario;
                @AbrirInventario.performed += instance.OnAbrirInventario;
                @AbrirInventario.canceled += instance.OnAbrirInventario;
            }
        }
    }
    public VRActions @VR => new VRActions(this);
    public interface IVRActions
    {
        void OnSaltar(InputAction.CallbackContext context);
        void OnAtaque(InputAction.CallbackContext context);
        void OnUsar(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnHeadRotation(InputAction.CallbackContext context);
        void OnSlotPlus(InputAction.CallbackContext context);
        void OnSlotMinus(InputAction.CallbackContext context);
        void OnAbrirInventario(InputAction.CallbackContext context);
    }
}
